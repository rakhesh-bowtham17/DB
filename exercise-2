select * from employees; 
-- 1. Write a SQL query to remove the details of an employee whose first name ends in ‘even’ 

delete from employees where FIRST_NAME like '%even'; 

-- 2. Write a query in SQL to show the three minimum values of the salary from the table. 
select distinct salary from employees order by  salary limit 4; 

-- 3. Write a SQL query to remove the employees table from the database

-- BEGIN TRANSACTION;
drop table DUMMY;
-- ROLLBACK;
-- COMMIT;

--4 Write a SQL query to copy the details of this table into a new table with table name as Employee table and to delete the records in employees table

CREATE TABLE Employee AS
SELECT * FROM employees;
-- delete from employess;

--5 Write a SQL query to remove the column Age from the table

ALTER TABLE Employee ADD COLUMN age INT;
select * from employee;
ALTER TABLE employee DROP COLUMN Age;
select * from Employee;

--6 Obtain the list of employees (their full name, email, hire_year) where they have joined the firm before 2000
--optimise
SELECT CONCAT(first_name, ' ', last_name) AS full_name, email, hire_date  AS hire_year
FROM employee 
WHERE YEAR(hire_date) < 2000;

select * from Employee;

--7 Fetch the employee_id and job_id of those employees whose start year lies in the range of 1990 and 1999

SELECT employee_id, job_id, hire_date
FROM employee
WHERE YEAR(hire_date) BETWEEN 1990 AND 1999;

--8 Find the first occurrence of the letter 'A' in each employees Email ID return the employee_id, email id and the letter position

SELECT employee_id, email, regexp_instr(email, 'A') AS letter_position
FROM employee
WHERE email LIKE '%A%';

--9 Fetch the list of employees(Employee_id, full name, email) whose full name holds characters less than 12

SELECT employee_id, CONCAT(first_name, ' ', last_name) AS full_name, email
FROM employee
WHERE LENGTH(full_name) > 12;

--10 Create a unique string by hyphenating the first name, last name , and email of the employees to obtain a new field named UNQ_ID Return the employee_id, and their corresponding UNQ_ID;

SELECT employee_id, CONCAT_WS('-', first_name, last_name, email) AS UNQ_ID
FROM employee;

-- 11 Write a SQL query to update the size of email column to 30
ALTER TABLE employee MODIFY COLUMN email VARCHAR(30);
desc table employee;

-- 12 Fetch all employees with their first name , email , phone (without extension part) and extension (just the extension) Info : this mean you need to separate phone into 2 parts eg: 123.123.1234.12345 => 123.123.1234 and 12345 . first half in phone column and second half in extension column
SELECT 
  first_name, 
  email, 
  CASE 
    WHEN length(SPLIT_PART(phone_number, '.',-1)) > 4 THEN 
      CONCAT_WS('.', SPLIT_PART(phone_number, '.', 1), SPLIT_PART(phone_number, '.', 2),
      SPLIT_PART(phone_number, '.', 3)) 
    ELSE 
      CONCAT_WS('.', SPLIT_PART(phone_number, '.', 1), SPLIT_PART(phone_number, '.', 2)) 
  END AS phone, 
  CASE 
    WHEN length(SPLIT_PART(phone_number, '.',-1)) > 4  THEN 
      SPLIT_PART(phone_number, '.', -1) 
    ELSE 
      SPLIT_PART(phone_number, '.', 3) 
  END AS extension
FROM employee;

select phone_number,first_name,split_part(phone_number,'.',-1) as extension, REVERSE(right(REVERSE(phone_number), charindex(extension,phone_number,1)-2)) as remaining from employee;
-- 515.123.4567
-- 7654.321.515
select phone_number,first_name,split_part(phone_number,'.',-1) as extension, REVERSE(right(REVERSE(phone_number), length(phone_number)-length(extension)-1)) as remaining from employee;

select * from employee;
-- 13 Write a SQL query to find the employee with second and third maximum salary.
select * from employee where salary IN (select distinct salary from employee order by salary DESC  limit 2 offset 1);

--14  Fetch all details of top 3 highly paid employees who are in department Shipping and IT
SELECT e.employee_id, CONCAT(first_name, ' ', last_name) AS full_name, e.salary, d.department_name
FROM employees e
JOIN (
  SELECT department_id, department_name
  FROM departments
) d ON e.department_id = d.department_id
WHERE d.department_name IN ('Shipping', 'IT')
ORDER BY e.salary DESC
LIMIT 3;

SELECT e.employee_id, CONCAT(e.first_name, ' ', e.last_name) AS full_name, e.salary, d.department_name
FROM employees e
JOIN departments d ON e.department_id = d.department_id
WHERE d.department_name IN ('Shipping', 'IT')
ORDER BY e.salary DESC
LIMIT 3;






select * from jobs;
select * from job_history;
select * from employee;

-- 15. Display employee id and the positions(jobs) held by that employee (including the current position)
select employee_id,JOB_ID from employee 
UNION
select employee_id,JOB_ID from job_history
order by employee_id;


-- 16. Display Employee first name and date joined as WeekDay, Month Day, Year Eg : Emp ID Date Joined 1 Monday, June 21st, 1999
SELECT 
  CONCAT(first_name, ' ', last_name) AS employee_name,
  CONCAT_WS(',',dayname(hire_date),monthname(hire_date),day(hire_date),year(hire_date)) AS date_joined
FROM employees;

--17. The company holds a new job opening for Data Engineer (DT_ENGG) with a minimum salary of 12,000 and maximum salary of 30,000 . The job position might be removed based on market trends (so, save the changes) . - Later, update the maximum salary to 40,000 . - Save the entries as well.- Now, revert back the changes to the initial state, where the salary was 30,000

select * from jobs;
DELETE FROM jobs WHERE job_id = 'DT_ENGG';

INSERT INTO jobs (job_id, job_title, min_salary, max_salary) 
VALUES ('DT_ENGG', 'Data Engineer', 12000, 30000);
begin transaction;
UPDATE jobs SET max_salary = 40000 WHERE job_id = 'DT_ENGG';
rollback;


-- 18 Find the average salary of all the employees who got hired after 8th January 1996 but before 1st January 2000 and round the result to 3 decimals
SELECT ROUND(AVG(salary), 3) AS avg_salary
FROM employees
WHERE hire_date > '1996-01-08' AND hire_date < '2000-01-01';

--19 Display Australia, Asia, Antarctica, Europe along with the regions in the region table (Note: Do not insert data into the table) A. Display all the regions B. Display all the unique regions

select * from regions;

SELECT * FROM (
  SELECT region_name FROM regions
  UNION ALL
  SELECT 'Australia'
  UNION ALL
  SELECT 'Asia'
  UNION ALL
  SELECT 'Antarctica'
  UNION ALL
  SELECT 'Europe'
);

SELECT * FROM (
  SELECT region_name FROM regions
  UNION
  SELECT 'Australia'
  UNION
  SELECT 'Asia'
  UNION
  SELECT 'Antarctica'
  UNION
  SELECT 'Europe'
);






















